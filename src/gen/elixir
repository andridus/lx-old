module gen

import ast

fn generate_ast_elixir(atom string, left ast.LiteralType, right ast.LiteralType) string {
	left_metadata := left.metadata.str()
	left_str := strigify_ast(left)
	right_str := strigify_ast(right)
	return '{:${atom}, [${left_metadata}], [${left_str}, ${right_str}]}'
}

fn strigify_ast(lt ast.LiteralType) string {
	return match lt {
		ast.AST {
			main := strigify_ast(lt.main)
			args := lt.args.map(strigify_ast(it))
			'{${main}, [${lt.metadata.str()}], ${args}}'
		}
		ast.Atom {
			'{:${lt.value}, [${lt.metadata.str()}], nil}'
		}
		ast.Integer {
			lt.value.str()
		}
		ast.Nil {
			'nil'
		}
		ast.String {
			lt.value
		}
	}
}
